// <auto-generated />
using System;
using FADMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FADMS.Data.Migrations
{
    [DbContext(typeof(FADMSDbContext))]
    partial class FADMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FADMS.Data.Entity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FADMS.Data.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PersonName");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("bpNumbers");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(120);

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<int?>("isActive");

                    b.Property<int>("isPassChanges");

                    b.Property<DateTime?>("passChangesDate");

                    b.Property<string>("ranks");

                    b.Property<int?>("thanaId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(120);

                    b.Property<int?>("userTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("thanaId");

                    b.HasIndex("userTypeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FADMS.Data.Entity.ArmsInfo.ArmType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmTypeName")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("ArmTypeNameBn")
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ArmTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.GunRepairAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fileName");

                    b.Property<string>("fileUrl");

                    b.Property<int?>("gunRepairId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("gunRepairId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.ToTable("gunRepairAttachments");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.OrganizationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fileName");

                    b.Property<string>("fileUrl");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("organizationInfoId");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("organizationInfoId");

                    b.ToTable("organizationAttachments");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.PersonalAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("fileName");

                    b.Property<string>("fileUrl");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("personalInfoId");

                    b.ToTable("personalAttachments");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.FAMSModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("isTeam");

                    b.Property<string>("moduleName");

                    b.Property<string>("moduleNameBN");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("FAMSModules");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationRoleId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("eRPModuleId");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRoleId");

                    b.HasIndex("eRPModuleId");

                    b.ToTable("ModuleAccessPages");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.Navbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("activeLi")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("area")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("controller")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("displayOrder");

                    b.Property<string>("imageClass")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<int?>("moduleId");

                    b.Property<string>("nameOption")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nameOptionBangla")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("parentID");

                    b.Property<bool>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("moduleId");

                    b.ToTable("Navbars");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("userTypeName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("userTypeNameBn")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.AttachmentComment.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("actionType")
                        .HasMaxLength(250);

                    b.Property<int?>("actionTypeId");

                    b.Property<string>("comment");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("title")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department");

                    b.Property<string>("Designation");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("dealerId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("mobileNumber");

                    b.Property<string>("personName");

                    b.Property<string>("phoneNumber");

                    b.Property<int?>("supplierId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("dealerId");

                    b.HasIndex("supplierId");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("decimalAllow");

                    b.Property<string>("formalName");

                    b.Property<int?>("isDelete");

                    b.Property<string>("symbolSign");

                    b.Property<string>("symbolText");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Dealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LicenseNumber");

                    b.Property<string>("VATNumber");

                    b.Property<string>("alternativeEmail");

                    b.Property<string>("binNumber");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("dealerName")
                        .HasMaxLength(250);

                    b.Property<string>("dealerNameBn")
                        .HasMaxLength(250);

                    b.Property<int?>("dealerTypeId");

                    b.Property<string>("eTinNumber");

                    b.Property<string>("email");

                    b.Property<int?>("isAuthorized");

                    b.Property<int?>("isDelete");

                    b.Property<string>("mobile");

                    b.Property<string>("phone");

                    b.Property<string>("registeredAddress");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("dealerTypeId");

                    b.ToTable("dealers");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressCategoryId");

                    b.Property<string>("blockSector");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("dealerId");

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<string>("houseVillage");

                    b.Property<int?>("isDelete");

                    b.Property<string>("postCode");

                    b.Property<string>("postOffice");

                    b.Property<int?>("thanaId");

                    b.Property<string>("type");

                    b.Property<string>("union");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("addressCategoryId");

                    b.HasIndex("countryId");

                    b.HasIndex("dealerId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("thanaId");

                    b.ToTable("dealerAddresss");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerAddressCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("dealerAddressCategories");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DealerId");

                    b.Property<int?>("ItemId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("ItemId");

                    b.ToTable("dealerItems");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("dealerTypeName")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("dealerTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArmTypeId");

                    b.Property<int?>("DealerId");

                    b.Property<int?>("accountLedgerId");

                    b.Property<string>("costingMethod")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imageUrl");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isParent");

                    b.Property<string>("itemCode")
                        .HasMaxLength(20);

                    b.Property<string>("itemDescription");

                    b.Property<int?>("itemHsCodeId");

                    b.Property<string>("itemName")
                        .HasMaxLength(250);

                    b.Property<int?>("parentId");

                    b.Property<int?>("productionTypeId");

                    b.Property<int?>("reOrderLevel");

                    b.Property<decimal?>("reorderQty")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("unitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ArmTypeId");

                    b.HasIndex("DealerId");

                    b.HasIndex("itemHsCodeId");

                    b.HasIndex("productionTypeId");

                    b.HasIndex("unitId");

                    b.ToTable("items");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.ItemHsCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AIT")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("AT")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CD")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("EXD")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("RD")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SD")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TTI")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VAT")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("hsCode")
                        .HasMaxLength(10);

                    b.Property<string>("hsDescription")
                        .HasMaxLength(450);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("taxYearId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<int?>("vATScheduleId");

                    b.Property<DateTime?>("validFrom");

                    b.Property<int?>("vatCategoryId");

                    b.Property<int?>("vatTableId");

                    b.HasKey("Id");

                    b.HasIndex("taxYearId");

                    b.HasIndex("vATScheduleId");

                    b.HasIndex("vatCategoryId");

                    b.HasIndex("vatTableId");

                    b.ToTable("itemHsCodes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.ItemSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArmTypeId");

                    b.Property<int?>("DealerId");

                    b.Property<string>("costingMethod")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("imageUrl");

                    b.Property<int?>("isDelete");

                    b.Property<string>("itemCode")
                        .HasMaxLength(20);

                    b.Property<string>("itemDescription");

                    b.Property<int?>("itemId");

                    b.Property<decimal?>("reorderQty")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("specificationName")
                        .HasMaxLength(250);

                    b.Property<int?>("unitId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ArmTypeId");

                    b.HasIndex("DealerId");

                    b.HasIndex("itemId");

                    b.HasIndex("unitId");

                    b.ToTable("itemSpecifications");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("productionTypeName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("productionTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("paymentTypeName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("paymentTypeNameBN")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("paymentTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("atAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("atPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("cdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("cdPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("currencyId");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("itemSpecificationId");

                    b.Property<int?>("purchaseId");

                    b.Property<decimal?>("quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rdPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("sdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("sdPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("taxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("taxPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<decimal?>("vatAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("vatPercent")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("currencyId");

                    b.HasIndex("itemSpecificationId");

                    b.HasIndex("purchaseId");

                    b.ToTable("purchaseOrderDetails");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("atAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("billOfEntryNo");

                    b.Property<string>("billToLocation")
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("cdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("chalanNo");

                    b.Property<int?>("companyId");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("dealerId");

                    b.Property<int?>("isClose");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isStockClose");

                    b.Property<DateTime?>("lcDate");

                    b.Property<string>("lcNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("netTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("paymentDate");

                    b.Property<int?>("paymentTypeId");

                    b.Property<DateTime?>("poDate");

                    b.Property<string>("poNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("purchaseType");

                    b.Property<int?>("purchaseVatTypeId");

                    b.Property<decimal?>("rdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("rfqRef")
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("sdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("supplierId");

                    b.Property<decimal?>("taxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("taxPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<decimal?>("vatAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("vatPercent")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("vds")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("dealerId");

                    b.HasIndex("paymentTypeId");

                    b.HasIndex("purchaseVatTypeId");

                    b.HasIndex("supplierId");

                    b.ToTable("purchaseOrderMasters");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseReturnDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("purchaseOrderDetailId");

                    b.Property<int?>("purchaseReturnMasterId");

                    b.Property<decimal?>("quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("purchaseOrderDetailId");

                    b.HasIndex("purchaseReturnMasterId");

                    b.ToTable("purchaseReturnDetails");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseReturnMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DiscountOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SDOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VATOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("invoiceDate");

                    b.Property<string>("invoiceNumber");

                    b.Property<int?>("isClose");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isPayClose");

                    b.Property<int?>("isStockClose");

                    b.Property<DateTime?>("paymentDate");

                    b.Property<int?>("purchaseOrderMasterId");

                    b.Property<string>("remarks");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("purchaseOrderMasterId");

                    b.ToTable("purchaseReturnMasters");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseVatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isActive");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("nameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("purchaseVatTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("atAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("atPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("cdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("cdPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("itemSpecificationId");

                    b.Property<decimal?>("lineTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("rdPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("salesInvoiceMasterId");

                    b.Property<decimal?>("sdAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("sdPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("taxAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("taxPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<decimal?>("vatAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("vatPercentage")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("itemSpecificationId");

                    b.HasIndex("salesInvoiceMasterId");

                    b.ToTable("salesInvoiceDetails");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ATOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("CDOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("DiscountOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("RDOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SDOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("TAXOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VATOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("dealerId");

                    b.Property<int?>("exportType");

                    b.Property<DateTime?>("invoiceDate");

                    b.Property<string>("invoiceNumber");

                    b.Property<int?>("isClose");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isStockClose");

                    b.Property<DateTime?>("lcDate");

                    b.Property<string>("lcNo")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("liInfoId");

                    b.Property<int?>("licenseInfoId");

                    b.Property<DateTime?>("paymentDate");

                    b.Property<int?>("salesType");

                    b.Property<int?>("salesVatTypeId");

                    b.Property<string>("shiftTo");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<decimal?>("vds")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("dealerId");

                    b.HasIndex("licenseInfoId");

                    b.HasIndex("salesVatTypeId");

                    b.ToTable("salesInvoiceMasters");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesReturnInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<decimal?>("quantity")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int?>("salesInvoiceDetailId");

                    b.Property<int?>("salesReturnInvoiceMasterId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("salesInvoiceDetailId");

                    b.HasIndex("salesReturnInvoiceMasterId");

                    b.ToTable("salesReturnInvoiceDetails");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesReturnInvoiceMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DiscountOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("NetTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("SDOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("VATOnTotal")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("invoiceDate");

                    b.Property<string>("invoiceNumber");

                    b.Property<int?>("isClose");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isPayClose");

                    b.Property<int?>("isStockClose");

                    b.Property<int?>("licenseInfoId");

                    b.Property<DateTime?>("paymentDate");

                    b.Property<string>("remarks");

                    b.Property<decimal?>("totalAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("licenseInfoId");

                    b.ToTable("salesReturnInvoiceMasters");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesVatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isActive");

                    b.Property<int?>("isDelete");

                    b.Property<string>("name");

                    b.Property<string>("nameBn");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("salesVatTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SpecificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("specificationCategoryName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("specificationCategories");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SpecificationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("itemSpecificationId");

                    b.Property<int?>("specificationCategoryId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("value")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("itemSpecificationId");

                    b.HasIndex("specificationCategoryId");

                    b.ToTable("specificationDetails");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DealerId");

                    b.Property<string>("LicenseNumber");

                    b.Property<string>("VATNumber");

                    b.Property<string>("alternativeEmail");

                    b.Property<string>("binNumber");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("eTinNumber");

                    b.Property<string>("email");

                    b.Property<int?>("isAuthorized");

                    b.Property<int?>("isDelete");

                    b.Property<string>("mobile");

                    b.Property<string>("phone");

                    b.Property<string>("registeredAddress");

                    b.Property<string>("supplierName")
                        .HasMaxLength(250);

                    b.Property<string>("supplierNameBn")
                        .HasMaxLength(250);

                    b.Property<int?>("supplierTypeId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("supplierTypeId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SupplierAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("addressCategoryId");

                    b.Property<string>("blockSector");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<string>("houseVillage");

                    b.Property<int?>("isDelete");

                    b.Property<string>("postCode");

                    b.Property<string>("postOffice");

                    b.Property<int?>("supplierId");

                    b.Property<int?>("thanaId");

                    b.Property<string>("type");

                    b.Property<string>("union");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("addressCategoryId");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("supplierId");

                    b.HasIndex("thanaId");

                    b.ToTable("supplierAddress");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SupplierAddressCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("supplierAddressCategories");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("supplierTypeName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("supplierTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.TaxYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("aliasName");

                    b.Property<decimal?>("allowablePerquisit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("Date");

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("Date");

                    b.Property<decimal?>("taxLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("taxYearName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("taxYears");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("description")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("unitName")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("units");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.VATSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("vatScheduleName");

                    b.HasKey("Id");

                    b.ToTable("vATSchedules");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.VatCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("vatCategoryName");

                    b.HasKey("Id");

                    b.ToTable("vatCategories");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.VatTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("tableName");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("vatTables");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("area");

                    b.Property<string>("blockSector");

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<string>("houseVillage");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("postCode");

                    b.Property<string>("postOffice");

                    b.Property<string>("roadNo");

                    b.Property<int?>("thanaId");

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<string>("union");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.HasIndex("thanaId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.GunRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment");

                    b.Property<DateTime?>("GDdate");

                    b.Property<string>("GdNumber");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<int?>("dealerId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("licenseNumber");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("reason");

                    b.Property<string>("referenceNO");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("dealerId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.ToTable("gunRepairs");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.LicenseInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistrictId");

                    b.Property<int?>("armTypeId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("dateOfExpair");

                    b.Property<DateTime?>("dateOfIssue");

                    b.Property<int?>("divisionId");

                    b.Property<int?>("isDelete");

                    b.Property<string>("licenseNumber")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<int?>("licenseSourseTypeId");

                    b.Property<int?>("licenseTypeId");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("place")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("reason")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("remarks")
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("source")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<int?>("thanaId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("armTypeId");

                    b.HasIndex("divisionId");

                    b.HasIndex("licenseSourseTypeId");

                    b.HasIndex("licenseTypeId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.HasIndex("thanaId");

                    b.ToTable("LicenseInfos");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.LicenseSourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LicenseSourseTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("LicenseTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LicenseNo");

                    b.Property<string>("OrgCode");

                    b.Property<int?>("armTypeId");

                    b.Property<string>("bbAttachment");

                    b.Property<string>("beforeArms");

                    b.Property<string>("branchManager");

                    b.Property<string>("branchName");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("establishDate");

                    b.Property<string>("homeRentalAgreementAttachment");

                    b.Property<int?>("isBBPermit");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("isHomeRentalAgreement");

                    b.Property<int?>("licenseTypeId");

                    b.Property<string>("name");

                    b.Property<int?>("noOfEmployee");

                    b.Property<int?>("noOfVehicle");

                    b.Property<int?>("numberOfFireArms");

                    b.Property<string>("orgCategory");

                    b.Property<string>("ownerName");

                    b.Property<string>("reasonOfFireArms");

                    b.Property<string>("securityProtected");

                    b.Property<int?>("status");

                    b.Property<string>("tid");

                    b.Property<string>("type");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("armTypeId");

                    b.ToTable("organizationInfos");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(250)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("organizationTypes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.PersonalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("LicenseNo");

                    b.Property<int?>("abortedarmTypeId");

                    b.Property<string>("age");

                    b.Property<string>("anualincome")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<int?>("armTypeId");

                    b.Property<string>("batch")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("birthIdentificationNo")
                        .HasMaxLength(100);

                    b.Property<string>("birthPlace")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("bloodGroup")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("causeofabortion");

                    b.Property<string>("comment");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("dateOfBirth");

                    b.Property<string>("designation")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("disability")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("dualCitizenship");

                    b.Property<string>("education")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("emailAddress")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("endArms");

                    b.Property<string>("fatherNameBangla")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("fatherNameEN")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("fatherOccupation");

                    b.Property<bool>("freedomFighter");

                    b.Property<string>("freedomFighterNo")
                        .HasColumnType("NVARCHAR(160)");

                    b.Property<string>("gender");

                    b.Property<string>("govtID")
                        .HasMaxLength(250);

                    b.Property<string>("gpfAcNo")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<string>("gpfNomineeName")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("isforeignGun");

                    b.Property<int?>("isfreedomfighter");

                    b.Property<int?>("isgovtjob");

                    b.Property<string>("islicenseaborted");

                    b.Property<string>("isnotari");

                    b.Property<int?>("ispolitical");

                    b.Property<string>("isstamp");

                    b.Property<string>("jobIdentificationNo");

                    b.Property<string>("jobStatus");

                    b.Property<string>("jobType");

                    b.Property<int?>("licenseTypeId");

                    b.Property<string>("maritalStatus")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("mobileNumberOffice")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("mobileNumberPersonal")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("motherNameBangla")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("motherNameEn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("motherOccupation");

                    b.Property<string>("nameBangla")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameEnglish")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameofservice")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nationalID")
                        .HasMaxLength(100);

                    b.Property<string>("nationality")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<int?>("occupationId");

                    b.Property<int?>("occupationStatusId");

                    b.Property<string>("ocupation");

                    b.Property<string>("organization")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<int?>("organizationInfoId");

                    b.Property<string>("othersArms");

                    b.Property<string>("pabx")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("party");

                    b.Property<string>("partydesignaion");

                    b.Property<string>("passportNo")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<int>("personType");

                    b.Property<string>("personalInfoCode")
                        .HasMaxLength(50);

                    b.Property<string>("polPosition");

                    b.Property<int?>("politicalPartyId");

                    b.Property<string>("previousArmsCode");

                    b.Property<string>("previousLicenseNo");

                    b.Property<string>("reason");

                    b.Property<int?>("religionId");

                    b.Property<string>("spouseName");

                    b.Property<string>("spouseNameBangla");

                    b.Property<string>("spouseOccupation");

                    b.Property<string>("telephoneOffice")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("telephoneResidence")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<string>("tin")
                        .HasColumnType("NVARCHAR(60)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("occupationId");

                    b.HasIndex("occupationStatusId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("politicalPartyId");

                    b.HasIndex("religionId");

                    b.ToTable("PersonalInfos");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.Photograph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("remarks")
                        .HasColumnType("NVARCHAR(300)");

                    b.Property<string>("type")
                        .IsRequired();

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.ToTable("Photographs");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("countryCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("countryName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("countryNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("districtCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("districtName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("districtNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int>("divisionId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("divisionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("countryId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("divisionName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("divisionNameBn");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("countryId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.DivisionDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("divisionDistrictName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("divisionDistrictNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("rangeMetroId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("rangeMetroId");

                    b.ToTable("DivisionDistricts");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("occupationName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(180)");

                    b.Property<string>("occupationShortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("shortOrder");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.OccupationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("OccupationStatuses");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.PoliticalParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<string>("nameBn")
                        .HasColumnType("NVARCHAR(260)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("PoliticalParties");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.RangeMetro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("rangeMetroName")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<string>("rangeMetroNameBn")
                        .HasColumnType("NVARCHAR(350)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("RangeMetros");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("isDelete");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Thana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<int?>("districtId");

                    b.Property<string>("isActive")
                        .HasColumnType("NVARCHAR(10)");

                    b.Property<int?>("isDelete");

                    b.Property<string>("latitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("longitude")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<int?>("rangeMetroId");

                    b.Property<string>("shortName")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("thanaCode")
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("thanaName")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<string>("thanaNameBn")
                        .HasColumnType("NVARCHAR(120)");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("districtId");

                    b.HasIndex("rangeMetroId");

                    b.ToTable("Thanas");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("applicationRouteId");

                    b.Property<string>("applicationUserId");

                    b.Property<string>("comment");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<string>("fileName");

                    b.Property<string>("fileUrl");

                    b.Property<int?>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRouteId");

                    b.HasIndex("applicationUserId");

                    b.ToTable("applicationAttachments");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationEnquireInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("allCertificateVarifyStatus");

                    b.Property<int?>("applicationRouteId");

                    b.Property<string>("applicationUserId");

                    b.Property<int?>("armsManagementKnoledgeStatus");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<int?>("isAppropriate");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("lifeThreatArmsNeedStatus");

                    b.Property<string>("remarks");

                    b.Property<int?>("socialPeaceBreakingStatus");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.Property<string>("voilenceInfo");

                    b.HasKey("Id");

                    b.HasIndex("applicationRouteId");

                    b.HasIndex("applicationUserId");

                    b.ToTable("applicationEnquireInfos");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("applicationNo");

                    b.Property<int?>("armTypeId");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<int?>("districtId");

                    b.Property<int?>("divisionId");

                    b.Property<int?>("isDelete");

                    b.Property<int?>("organizationInfoId");

                    b.Property<int?>("personalInfoId");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<int?>("thanaId");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("armTypeId");

                    b.HasIndex("districtId");

                    b.HasIndex("divisionId");

                    b.HasIndex("organizationInfoId");

                    b.HasIndex("personalInfoId");

                    b.HasIndex("thanaId");

                    b.ToTable("applicationRoutes");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.AppllicationRouteLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("applicationRouteId");

                    b.Property<string>("applicationUserId");

                    b.Property<string>("comments");

                    b.Property<DateTime?>("createdAt");

                    b.Property<string>("createdBy")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("date");

                    b.Property<int?>("isDelete");

                    b.Property<string>("remarks");

                    b.Property<int?>("status");

                    b.Property<DateTime?>("updatedAt");

                    b.Property<string>("updatedBy")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("applicationRouteId");

                    b.HasIndex("applicationUserId");

                    b.ToTable("appllicationRouteLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FADMS.Data.Entity.ApplicationUser", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");

                    b.HasOne("FADMS.Data.Entity.Auth.UserType", "userType")
                        .WithMany()
                        .HasForeignKey("userTypeId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.GunRepairAttachment", b =>
                {
                    b.HasOne("FADMS.Data.Entity.LicenseInformation.GunRepair", "gunRepair")
                        .WithMany()
                        .HasForeignKey("gunRepairId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.OrganizationAttachment", b =>
                {
                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Attachment.PersonalAttachment", b =>
                {
                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.ModuleAccessPage", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationRole", "applicationRole")
                        .WithMany()
                        .HasForeignKey("applicationRoleId");

                    b.HasOne("FADMS.Data.Entity.Auth.FAMSModule", "eRPModule")
                        .WithMany()
                        .HasForeignKey("eRPModuleId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Auth.Navbar", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Auth.FAMSModule", "module")
                        .WithMany()
                        .HasForeignKey("moduleId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Contact", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "dealer")
                        .WithMany()
                        .HasForeignKey("dealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Dealer", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FADMS.Data.Entity.Dealer.DealerType", "dealerType")
                        .WithMany()
                        .HasForeignKey("dealerTypeId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerAddress", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.DealerAddressCategory", "addressCategory")
                        .WithMany()
                        .HasForeignKey("addressCategoryId");

                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "dealer")
                        .WithMany()
                        .HasForeignKey("dealerId");

                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.DealerItems", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Item", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ArmsInfo.ArmType", "ArmType")
                        .WithMany()
                        .HasForeignKey("ArmTypeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.ItemHsCode", "itemHsCode")
                        .WithMany()
                        .HasForeignKey("itemHsCodeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.ProductionType", "productionType")
                        .WithMany()
                        .HasForeignKey("productionTypeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.ItemHsCode", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.TaxYear", "taxYear")
                        .WithMany()
                        .HasForeignKey("taxYearId");

                    b.HasOne("FADMS.Data.Entity.Dealer.VATSchedule", "vATSchedule")
                        .WithMany()
                        .HasForeignKey("vATScheduleId");

                    b.HasOne("FADMS.Data.Entity.Dealer.VatCategory", "vatCategory")
                        .WithMany()
                        .HasForeignKey("vatCategoryId");

                    b.HasOne("FADMS.Data.Entity.Dealer.VatTable", "vatTable")
                        .WithMany()
                        .HasForeignKey("vatTableId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.ItemSpecification", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ArmsInfo.ArmType", "ArmType")
                        .WithMany()
                        .HasForeignKey("ArmTypeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Item", "Item")
                        .WithMany()
                        .HasForeignKey("itemId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("unitId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderDetail", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("currencyId");

                    b.HasOne("FADMS.Data.Entity.Dealer.ItemSpecification", "itemSpecification")
                        .WithMany()
                        .HasForeignKey("itemSpecificationId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderMaster", "purchase")
                        .WithMany()
                        .HasForeignKey("purchaseId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderMaster", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "dealer")
                        .WithMany()
                        .HasForeignKey("dealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("paymentTypeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PurchaseVatType", "purchaseVatType")
                        .WithMany()
                        .HasForeignKey("purchaseVatTypeId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseReturnDetail", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderDetail", "purchaseOrderDetail")
                        .WithMany()
                        .HasForeignKey("purchaseOrderDetailId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PurchaseReturnMaster", "purchaseReturnMaster")
                        .WithMany()
                        .HasForeignKey("purchaseReturnMasterId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Purchase.PurchaseReturnMaster", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Purchase.PurchaseOrderMaster", "purchaseOrderMaster")
                        .WithMany()
                        .HasForeignKey("purchaseOrderMasterId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceDetail", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.ItemSpecification", "itemSpecification")
                        .WithMany()
                        .HasForeignKey("itemSpecificationId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceMaster", "salesInvoiceMaster")
                        .WithMany()
                        .HasForeignKey("salesInvoiceMasterId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceMaster", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "dealer")
                        .WithMany()
                        .HasForeignKey("dealerId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.LicenseInfo", "licenseInfo")
                        .WithMany()
                        .HasForeignKey("licenseInfoId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Sales.SalesVatType", "salesVatType")
                        .WithMany()
                        .HasForeignKey("salesVatTypeId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesReturnInvoiceDetail", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Sales.SalesInvoiceDetail", "salesInvoiceDetail")
                        .WithMany()
                        .HasForeignKey("salesInvoiceDetailId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Sales.SalesReturnInvoiceMaster", "salesReturnInvoiceMaster")
                        .WithMany()
                        .HasForeignKey("salesReturnInvoiceMasterId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Sales.SalesReturnInvoiceMaster", b =>
                {
                    b.HasOne("FADMS.Data.Entity.LicenseInformation.LicenseInfo", "licenseInfo")
                        .WithMany()
                        .HasForeignKey("licenseInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SpecificationDetail", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.ItemSpecification", "itemSpecification")
                        .WithMany()
                        .HasForeignKey("itemSpecificationId");

                    b.HasOne("FADMS.Data.Entity.Dealer.SpecificationCategory", "specificationCategory")
                        .WithMany()
                        .HasForeignKey("specificationCategoryId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.Supplier", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("FADMS.Data.Entity.Dealer.SupplierType", "supplierType")
                        .WithMany()
                        .HasForeignKey("supplierTypeId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Dealer.SupplierAddress", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.SupplierAddressCategory", "addressCategory")
                        .WithMany()
                        .HasForeignKey("addressCategoryId");

                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.Dealer.Supplier", "supplier")
                        .WithMany()
                        .HasForeignKey("supplierId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.Address", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");

                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.GunRepair", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Dealer.Dealer", "dealer")
                        .WithMany()
                        .HasForeignKey("dealerId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.LicenseInfo", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("FADMS.Data.Entity.ArmsInfo.ArmType", "armType")
                        .WithMany()
                        .HasForeignKey("armTypeId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.LicenseSourseType", "licenseSourseType")
                        .WithMany()
                        .HasForeignKey("licenseSourseTypeId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.LicenseType", "licenseType")
                        .WithMany()
                        .HasForeignKey("licenseTypeId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FADMS.Data.Entity.ArmsInfo.ArmType", "armType")
                        .WithMany()
                        .HasForeignKey("armTypeId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.PersonalInfo", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FADMS.Data.Entity.Master.Occupation", "occupation")
                        .WithMany()
                        .HasForeignKey("occupationId");

                    b.HasOne("FADMS.Data.Entity.Master.OccupationStatus", "occupationStatus")
                        .WithMany()
                        .HasForeignKey("occupationStatusId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.Master.PoliticalParty", "politicalParty")
                        .WithMany()
                        .HasForeignKey("politicalPartyId");

                    b.HasOne("FADMS.Data.Entity.Master.Religion", "religion")
                        .WithMany()
                        .HasForeignKey("religionId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.LicenseInformation.Photograph", b =>
                {
                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "OrganizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.District", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Division", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.DivisionDistrict", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.RangeMetro", "rangeMetro")
                        .WithMany()
                        .HasForeignKey("rangeMetroId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Master.Thana", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.RangeMetro", "rangeMetro")
                        .WithMany()
                        .HasForeignKey("rangeMetroId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationAttachment", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Route.ApplicationRoute", "applicationRoute")
                        .WithMany()
                        .HasForeignKey("applicationRouteId");

                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationEnquireInfo", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Route.ApplicationRoute", "applicationRoute")
                        .WithMany()
                        .HasForeignKey("applicationRouteId");

                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.ApplicationRoute", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ArmsInfo.ArmType", "armType")
                        .WithMany()
                        .HasForeignKey("armTypeId");

                    b.HasOne("FADMS.Data.Entity.Master.District", "district")
                        .WithMany()
                        .HasForeignKey("districtId");

                    b.HasOne("FADMS.Data.Entity.Master.Division", "division")
                        .WithMany()
                        .HasForeignKey("divisionId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.OrganizationInfo", "organizationInfo")
                        .WithMany()
                        .HasForeignKey("organizationInfoId");

                    b.HasOne("FADMS.Data.Entity.LicenseInformation.PersonalInfo", "personalInfo")
                        .WithMany()
                        .HasForeignKey("personalInfoId");

                    b.HasOne("FADMS.Data.Entity.Master.Thana", "thana")
                        .WithMany()
                        .HasForeignKey("thanaId");
                });

            modelBuilder.Entity("FADMS.Data.Entity.Route.AppllicationRouteLog", b =>
                {
                    b.HasOne("FADMS.Data.Entity.Route.ApplicationRoute", "applicationRoute")
                        .WithMany()
                        .HasForeignKey("applicationRouteId");

                    b.HasOne("FADMS.Data.Entity.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FADMS.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FADMS.Data.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
